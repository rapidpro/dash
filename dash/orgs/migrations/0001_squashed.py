# Generated by Django 5.0.8 on 2024-08-22 09:02

import functools
import json

import timezone_field.fields

import django.contrib.postgres.fields.jsonb
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import dash.utils


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# dash.orgs.migrations.0019_restructure_org_config
def migrate_api_token_and_common_org_config(apps, schema_editor):
    Org = apps.get_model("orgs", "Org")
    orgs = Org.objects.all()

    for org in orgs:
        if not org.config:
            old_config = dict()
        else:
            old_config = json.loads(org.config)

        if "common" in old_config and "rapidpro" in old_config:
            print("Skipped org(%d), it looks like already migrated" % org.id)
            continue

        new_config = {"common": old_config, "rapidpro": {"api_token": org.api_token}}
        org.config = json.dumps(new_config)
        org.save()


def noop(apps, schema_editor):
    pass


# dash.orgs.migrations.0022_populate_rapidpro_specific_config
def populate_rapidpro_config(apps, schema_editor):
    Org = apps.get_model("orgs", "Org")
    orgs = Org.objects.all()

    for org in orgs:
        if not org.config:
            continue

        backends_config_dict = getattr(settings, "DATA_API_BACKENDS_CONFIG", {})
        for backend_slug in backends_config_dict:
            config_fields = getattr(settings, "BACKENDS_ORG_CONFIG_FIELDS", [])
            for config_field in config_fields:
                name = config_field["name"]
                existing_value = org.config["common"].get(name, None)
                if backend_slug not in org.config:
                    org.config[backend_slug] = dict()
                org.config[backend_slug][name] = existing_value

        org.save()


# dash.orgs.migrations.0024_populate_org_backend
def populate_org_backend(apps, schema_editor):
    Org = apps.get_model("orgs", "Org")
    OrgBackend = apps.get_model("orgs", "OrgBackend")
    orgs = Org.objects.all()
    User = apps.get_model("auth", "User")
    root = User.objects.filter(username="root").first()

    if not root:
        root = User.objects.filter(username="root2").first()

    if not root:
        root = User.objects.create(username="root2")

    default_backend = getattr(settings, "SITE_BACKEND", None)
    host = getattr(settings, "SITE_API_HOST", None)

    for org in orgs:
        if not org.config:
            continue

        config = org.config
        rapidpro_config = config.get("rapidpro", dict())
        api_token = rapidpro_config.get("api_token", "")
        OrgBackend.objects.create(
            org=org,
            slug="rapidpro",
            api_token=api_token,
            host=host,
            backend_type=default_backend,
            created_by=root,
            modified_by=root,
        )

        del rapidpro_config["api_token"]
        config["rapipro"] = rapidpro_config
        org.config = config
        org.save()


# dash.orgs.migrations.0026_fix_org_config_rapidpro
def fix_org_config_rapidpro(apps, schema_editor):
    Org = apps.get_model("orgs", "Org")
    orgs = Org.objects.all()
    for org in orgs:
        if not org.config:
            continue

        config = org.config
        rapidpro_config = config.get("rapidpro", dict())
        if "api_token" in rapidpro_config:
            del rapidpro_config["api_token"]

        if "rapipro" in config:
            del config["rapipro"]  # remove the mistakenly added key by typo in 0024_populate_org_backend

        config["rapidpro"] = rapidpro_config
        org.config = config
        org.save()


class Migration(migrations.Migration):

    replaces = [
        ("orgs", "0001_initial"),
        ("orgs", "0002_auto_20140802_2104"),
        ("orgs", "0003_org_logo"),
        ("orgs", "0004_auto_20140804_1453"),
        ("orgs", "0005_orgbackground"),
        ("orgs", "0006_auto_20140919_2056"),
        ("orgs", "0007_auto_20140922_1514"),
        ("orgs", "0008_org_timezone"),
        ("orgs", "0009_auto_20150331_1452"),
        ("orgs", "0010_auto_20150618_1042"),
        ("orgs", "0011_auto_20150710_1612"),
        ("orgs", "0012_auto_20150715_1816"),
        ("orgs", "0013_auto_20150715_1831"),
        ("orgs", "0014_auto_20150722_1419"),
        ("orgs", "0015_auto_20160209_0926"),
        ("orgs", "0016_taskstate_is_disabled"),
        ("orgs", "0017_auto_20161026_1513"),
        ("orgs", "0018_auto_20170301_0914"),
        ("orgs", "0019_restructure_org_config"),
        ("orgs", "0020_remove_org_api_token"),
        ("orgs", "0021_auto_20180315_0823"),
        ("orgs", "0022_populate_rapidpro_specific_config"),
        ("orgs", "0023_orgbackend"),
        ("orgs", "0024_populate_org_backend"),
        ("orgs", "0025_auto_20180322_1415"),
        ("orgs", "0026_fix_org_config_rapidpro"),
        ("orgs", "0027_alter_org_options"),
        ("orgs", "0028_alter_org_config"),
        ("orgs", "0029_auto_20211025_1504"),
        ("orgs", "0030_alter_invitation_created_by_and_more"),
        ("orgs", "0031_alter_orgbackend_index_together"),
        ("orgs", "0032_rename_orgbackend_org_is_active_slug_orgs_orgbac_org_id_607508_idx"),
        ("orgs", "0033_rename_orgs_orgbac_org_id_607508_idx_orgs_orgbac_org_slug_idx_and_more"),
    ]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Org",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was originally created",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was last modified",
                    ),
                ),
                (
                    "name",
                    models.CharField(help_text="The name of this organization", max_length=128, verbose_name="Name"),
                ),
                (
                    "language",
                    models.CharField(
                        blank=True,
                        help_text="The main language used by this organization",
                        max_length=64,
                        null=True,
                        verbose_name="Language",
                    ),
                ),
                (
                    "subdomain",
                    models.SlugField(
                        blank=True,
                        error_messages={"unique": "This subdomain is not available"},
                        help_text="The subdomain for this organization",
                        max_length=255,
                        null=True,
                        unique=True,
                        verbose_name="Subdomain",
                    ),
                ),
                (
                    "api_token",
                    models.CharField(
                        blank=True,
                        help_text="The API token for the RapidPro account this dashboard is tied to",
                        max_length=128,
                        null=True,
                    ),
                ),
                (
                    "config",
                    models.TextField(
                        blank=True,
                        help_text="JSON blob used to store configuration information associated with this organization",
                        null=True,
                    ),
                ),
                (
                    "administrators",
                    models.ManyToManyField(
                        help_text="The administrators in your organization",
                        related_name="org_admins",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Administrators",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user which originally created this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="orgs_org_creations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "editors",
                    models.ManyToManyField(
                        help_text="The editors in your organization",
                        related_name="org_editors",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Editors",
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        help_text="The user which last modified this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="orgs_org_modifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "viewers",
                    models.ManyToManyField(
                        help_text="The viewers in your organization",
                        related_name="org_viewers",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Viewers",
                    ),
                ),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        help_text="The logo that should be used for this organization",
                        null=True,
                        upload_to="logos",
                    ),
                ),
                (
                    "timezone",
                    timezone_field.fields.TimeZoneField(
                        default="UTC", help_text="The timezone your organization is in.", verbose_name="Timezone"
                    ),
                ),
                (
                    "domain",
                    models.CharField(
                        blank=True,
                        error_messages={"unique": "This domain is not available"},
                        help_text="The custom domain for this organization",
                        max_length=255,
                        null=True,
                        unique=True,
                        verbose_name="Domain",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TaskState",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("task_key", models.CharField(max_length=32)),
                ("started_on", models.DateTimeField(null=True)),
                ("ended_on", models.DateTimeField(null=True)),
                ("last_successfully_started_on", models.DateTimeField(null=True)),
                ("last_results", models.TextField(null=True)),
                ("is_failing", models.BooleanField(default=False)),
                (
                    "org",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="task_states", to="orgs.org"
                    ),
                ),
                ("is_disabled", models.BooleanField(default=False)),
            ],
            options={},
        ),
        migrations.CreateModel(
            name="Invitation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was originally created",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was last modified",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="The email to which we send the invitation of the viewer",
                        max_length=254,
                        verbose_name="Email",
                    ),
                ),
                (
                    "secret",
                    models.CharField(
                        help_text="a unique code associated with this invitation",
                        max_length=64,
                        unique=True,
                        verbose_name="Secret",
                    ),
                ),
                (
                    "user_group",
                    models.CharField(
                        choices=[("A", "Administrator"), ("E", "Editor"), ("V", "Viewer")],
                        default="V",
                        max_length=1,
                        verbose_name="User Role",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user which originally created this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="orgs_invitation_creations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        help_text="The user which last modified this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="orgs_invitation_modifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        help_text="The organization to which the account is invited to view",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="invitations",
                        to="orgs.org",
                        verbose_name="Org",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="OrgBackground",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was originally created",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was last modified",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name to describe this background", max_length=128, verbose_name="Name"
                    ),
                ),
                (
                    "background_type",
                    models.CharField(
                        choices=[("B", "Banner"), ("P", "Pattern")],
                        default="P",
                        max_length=1,
                        verbose_name="Background type",
                    ),
                ),
                ("image", models.ImageField(help_text="The image file", upload_to="org_bgs")),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user which originally created this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="orgs_orgbackground_creations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        help_text="The user which last modified this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="orgs_orgbackground_modifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        help_text="The organization in which the image will be used",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="backgrounds",
                        to="orgs.org",
                        verbose_name="Org",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.RunPython(
            code=migrate_api_token_and_common_org_config,
            reverse_code=noop,
        ),
        migrations.RemoveField(
            model_name="org",
            name="api_token",
        ),
        migrations.AlterField(
            model_name="org",
            name="config",
            field=django.contrib.postgres.fields.jsonb.JSONField(
                default=dict,
                help_text="JSON blob used to store configuration information associated with this organization",
            ),
        ),
        migrations.RunPython(
            code=populate_rapidpro_config,
            reverse_code=noop,
        ),
        migrations.CreateModel(
            name="OrgBackend",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Whether this item is active, use this instead of deleting"
                    ),
                ),
                (
                    "created_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was originally created",
                    ),
                ),
                (
                    "modified_on",
                    models.DateTimeField(
                        blank=True,
                        default=django.utils.timezone.now,
                        editable=False,
                        help_text="When this item was last modified",
                    ),
                ),
                (
                    "api_token",
                    models.CharField(
                        blank=True, help_text="The API token for this backend", max_length=128, null=True
                    ),
                ),
                ("host", models.CharField(blank=True, max_length=128, null=True)),
                ("slug", models.CharField(max_length=16)),
                ("backend_type", models.CharField(blank=True, max_length=256, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        help_text="The user which originally created this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="orgs_orgbackend_creations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "modified_by",
                    models.ForeignKey(
                        help_text="The user which last modified this item",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="orgs_orgbackend_modifications",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "org",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="backends", to="orgs.org"
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.RunPython(
            code=populate_org_backend,
            reverse_code=noop,
        ),
        migrations.AlterField(
            model_name="orgbackend",
            name="api_token",
            field=models.CharField(default="", help_text="The API token for this backend", max_length=128),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="orgbackend",
            name="backend_type",
            field=models.CharField(default="", max_length=256),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="orgbackend",
            name="host",
            field=models.CharField(default="", max_length=128),
            preserve_default=False,
        ),
        migrations.AlterUniqueTogether(
            name="orgbackend",
            unique_together={("org", "slug")},
        ),
        migrations.RunPython(
            code=fix_org_config_rapidpro,
            reverse_code=noop,
        ),
        migrations.AlterModelOptions(
            name="org",
            options={"ordering": ["name"]},
        ),
        migrations.AlterField(
            model_name="org",
            name="config",
            field=models.JSONField(
                default=dict,
                help_text="JSON blob used to store configuration information associated with this organization",
            ),
        ),
        migrations.AlterField(
            model_name="org",
            name="logo",
            field=models.ImageField(
                blank=True,
                help_text="The logo that should be used for this organization",
                null=True,
                upload_to=functools.partial(dash.utils.generate_file_path, *("logos",), **{}),
            ),
        ),
        migrations.AlterField(
            model_name="orgbackground",
            name="image",
            field=models.ImageField(
                help_text="The image file",
                upload_to=functools.partial(dash.utils.generate_file_path, *("org_bgs",), **{}),
            ),
        ),
        migrations.AlterField(
            model_name="invitation",
            name="created_by",
            field=models.ForeignKey(
                help_text="The user which originally created this item",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(app_label)s_%(class)s_creations",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="invitation",
            name="modified_by",
            field=models.ForeignKey(
                help_text="The user which last modified this item",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(app_label)s_%(class)s_modifications",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="org",
            name="created_by",
            field=models.ForeignKey(
                help_text="The user which originally created this item",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(app_label)s_%(class)s_creations",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="org",
            name="modified_by",
            field=models.ForeignKey(
                help_text="The user which last modified this item",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(app_label)s_%(class)s_modifications",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="orgbackend",
            name="created_by",
            field=models.ForeignKey(
                help_text="The user which originally created this item",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(app_label)s_%(class)s_creations",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="orgbackend",
            name="modified_by",
            field=models.ForeignKey(
                help_text="The user which last modified this item",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(app_label)s_%(class)s_modifications",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="orgbackground",
            name="created_by",
            field=models.ForeignKey(
                help_text="The user which originally created this item",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(app_label)s_%(class)s_creations",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="orgbackground",
            name="modified_by",
            field=models.ForeignKey(
                help_text="The user which last modified this item",
                on_delete=django.db.models.deletion.PROTECT,
                related_name="%(app_label)s_%(class)s_modifications",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterIndexTogether(
            name="orgbackend",
            index_together={("org", "is_active", "slug")},
        ),
        migrations.RenameIndex(
            model_name="orgbackend",
            new_name="orgs_orgbac_org_slug_idx",
            old_fields=("org", "is_active", "slug"),
        ),
        migrations.AlterUniqueTogether(
            name="orgbackend",
            unique_together=set(),
        ),
        migrations.AlterUniqueTogether(
            name="taskstate",
            unique_together=set(),
        ),
        migrations.AddConstraint(
            model_name="orgbackend",
            constraint=models.UniqueConstraint(fields=("org", "slug"), name="orgs_orgbackend_org_slug_unique"),
        ),
        migrations.AddConstraint(
            model_name="taskstate",
            constraint=models.UniqueConstraint(fields=("org", "task_key"), name="orgs_taskstate_org_task_key_unique"),
        ),
    ]
